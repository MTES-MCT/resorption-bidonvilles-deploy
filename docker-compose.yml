version: '3.7'

services:
  rb_proxy:
    image: nginx:1.19-alpine
    container_name: rb_proxy
    env_file:
      - ./config/.env
    ports:
      - 80:80
      - 443:443
    networks:
      - rb_network
    volumes:
      - ${RB_PROXY_CONFIG_FOLDER}/http.conf:/etc/nginx/conf.d/http.conf
      - ${RB_PROXY_CONFIG_FOLDER}/templates/${RB_PROXY_TEMPLATE}:/etc/nginx/templates
      - ${RB_DATA_FOLDER}/ssl:/etc/ssl
    depends_on:
      - rb_frontend
      - rb_api

  rb_database_data:
    build:
      context: ./database
    container_name: rb_database_data
    volumes:
      - ${RB_DATABASE_DATA_FOLDER}:/var/lib/postgresql/data
      - rb_database_backups:${RB_DATABASE_LOCALBACKUP_FOLDER}
      - ${RB_DATA_FOLDER}/rb_database_tmp:/tmp
    env_file:
      - ./config/.env
    ports:
      - ${RB_DATABASE_EXTERNAL_PORT}:5432
    networks:
      - rb_network
    healthcheck:
      test: pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}
      interval: 10s
      timeout: 10s
      retries: 6

  rb_database_agenda:
    image: mongo:${RB_AGENDA_MONGO_VERSION}
    container_name: rb_database_agenda
    healthcheck:
      test: mongo --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD}
      interval: 10s
      timeout: 10s
      retries: 6
    volumes:
      - ${RB_AGENDA_DATA_FOLDER}:/data/db
    networks:
      - rb_network
    env_file:
      - ./config/.env

  rb_frontend:
    container_name: rb_frontend
    networks:
      - rb_network
    expose:
      - 80
    env_file:
      - ./config/.env

  rb_api:
    container_name: rb_api
    networks:
      - rb_network
    expose:
      - 80
    env_file:
      - ./config/.env
    depends_on:
      rb_database_data:
        condition: service_healthy
      rb_database_agenda:
        condition: service_healthy


volumes:
  rb_database_backups:
    name: rb_database_backups

networks:
  rb_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16